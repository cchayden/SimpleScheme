;; perf.ss
;; performance measurements

(define count 100000)
(define total 0)
(define (test f)
  (let ((t (first (second (time-call f count)))))
    (set! total (+ total t))
    (display t)
    (display #\tab) (p f))
  )

(define (double x) (* 2 x))
(define x 10)

(p 'base)
(test (lambda () ))

(p 'constants)
(test (lambda () 10))
(test (lambda () #\a))
(test (lambda () "xxx"))
(test (lambda () #(10 20)))
(test (lambda () '()))

(p 'symbol)
(test (lambda () x))
(test (lambda () (string->symbol "xxx")))
(test (lambda () (symbol? x)))

(p 'boolean)
(test (lambda () (boolean? #t)))
(test (lambda () (eq? 10 10)))
(test (lambda () (equal? 10 10)))
(test (lambda () (eqv? 10 10)))
(test (lambda () (not 'a)))
(test (lambda () (null? '())))

(p 'list)
(define x (list 'a 'b))
(define y (list 'c 'd 'e))
(test (lambda () (append x y)))
(test (lambda () (assoc 'a x)))
(test (lambda () (assq 'a x)))
(test (lambda () (assv 'a x)))
(test (lambda () (first x)))
(test (lambda () (second x)))
(test (lambda () (third y)))
(test (lambda () (rest x)))
(test (lambda () (cons 'z x)))
(test (lambda () (length x)))
(test (lambda () (list 1 2)))
(test (lambda () (list-ref x 1)))
(test (lambda () (list-tail x 1)))
(test (lambda () (list? x)))
(test (lambda () (member 'a x)))
(test (lambda () (memq 'a x)))
(test (lambda () (memv 'a x)))
(test (lambda () (pair? x)))
(test (lambda () (reverse x)))
(test (lambda () (set-car! x 'v)))
(test (lambda () (set-cdr! x 'w)))

(p 'character)
(test (lambda () (char->integer #\a)))
(test (lambda () (char-alphabetic? #\a)))
(test (lambda () (char-ci<? #\a #\b)))
(test (lambda () (char-downcase #\A)))
(test (lambda () (char-lower-case? #\a)))
(test (lambda () (char-numeric? #\1)))
(test (lambda () (char-upcase #\a)))
(test (lambda () (char-upper-case? #\A)))
(test (lambda () (char-whitespace? #\space)))
(test (lambda () (char<? #\a #\b)))
(test (lambda () (char? #\a)))

(p 'string)
(define x "abc")
(define y '(#\a #\b))
(test (lambda () (list->string y)))
(test (lambda () (make-string 5)))
(test (lambda () (string #\a)))
(test (lambda () (string->list x)))
(test (lambda () (string->number "5")))
(test (lambda () (string-append x "z")))
(test (lambda () (string-ci<? x x)))
(test (lambda () (string-copy x)))
(test (lambda () (string-fill! x #\a)))
(test (lambda () (string-length x)))
(test (lambda () (string-ref x 1)))
(test (lambda () (string-set! x 1 #\b)))
(test (lambda () (string<? x x)))
(test (lambda () (string? x)))
(test (lambda () (substring x 1 2)))
(test (lambda () (symbol->string 'x)))

(p 'number)
(test (lambda () (* 2 10)))
(test (lambda () (+ 2 10)))
(test (lambda () (- 2 10)))
(test (lambda () (/ 2 10)))
(test (lambda () (< 3 4)))
(test (lambda () (abs -10)))
(test (lambda () (ceiling 4.5)))
(test (lambda () (floor 4.5)))
(test (lambda () (acos 0)))
(test (lambda () (asin 0)))
(test (lambda () (atan 1)))
(test (lambda () (complex? 4)))
(test (lambda () (cos 0)))
(test (lambda () (even? 4)))
(test (lambda () (exact? 5)))
(test (lambda () (exact->inexact 3)))
(test (lambda () (exp 3)))
(test (lambda () (expt 3 2)))
(test (lambda () (gcd 12 3)))
(test (lambda () (inexact? 5.5)))
(test (lambda () (inexact->exact 5.5)))
(test (lambda () (integer->char 61)))
(test (lambda () (integer? 5)))
(test (lambda () (lcm 3 4)))
(test (lambda () (log 2)))
(test (lambda () (max 3 4)))
(test (lambda () (min 4 3)))
(test (lambda () (modulo 11 2)))
(test (lambda () (negative? -4)))
(test (lambda () (number->string 10)))
(test (lambda () (number? 10)))
(test (lambda () (odd? 3)))
(test (lambda () (positive? 5)))
(test (lambda () (quotient 11 2)))
(test (lambda () (rational? 10)))
(test (lambda () (real? 10.4)))
(test (lambda () (remainder 11 2)))
(test (lambda () (round 2.5)))
(test (lambda () (sin 0)))
(test (lambda () (sqrt 2)))
(test (lambda () (tan 0)))
(test (lambda () (truncate 4.5)))
(test (lambda () (zero? 0)))

(p 'vector)
(define x #(10 20))
(define y '(a b))
(test (lambda () (list->vector y)))
(test (lambda () (make-vector 10)))
(test (lambda () (vector 10)))
(test (lambda () (vector->list x)))
(test (lambda () (vector-fill x 3)))
(test (lambda () (vector-length x)))
(test (lambda () (vector-ref x 1)))
(test (lambda () (vector-set! x 0 5)))
(test (lambda () (vector? x)))

(p 'syntax)
(test (lambda () (and 1)))
(test (lambda () (begin 10)))
(test (lambda () (case 10 ((10) 1)) ))
(test (lambda () (cond (#t 1))))
(test (lambda () (define x 10)))
(test (lambda () 
  (do ((i 0 (+ i 1))) ((= i 1)) 
      (+ i i))))
(test (lambda () (if #t 10 11)))
(test (lambda () (lambda ())))
(test (lambda () (let ((x 10)) x)))
(test (lambda () (let* ((x 10)) x)))
(test (lambda () (letrec ((x 10)) x)))
(test (lambda () (or 1)))
(test (lambda () (set! x 10)))


(p 'procedure)
(test (lambda () (double 10)))

(p 'args)
(test (lambda () (and)))
(test (lambda () (and 1)))
(test (lambda () (and 1 2)))
(test (lambda () (and 1 2 3)))
(test (lambda () (and 1 2 3 4)))

(display total) (display #\tab) (p 'total)


