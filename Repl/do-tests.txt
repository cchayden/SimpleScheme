;; do.ss
;; do-based perf tests

(define do-test
  (lambda (n fun) 
    (do ((i 0 (+ i 1))) ((= i n)) 
      (fun i i i i i i))))

(define test (lambda (n fun) 
  (/ (* 1000 (caadr (time (do-test n fun)))) n)))
(counters-on)
(trace-on)
(begin (display (test 10 list))(newline))
(trace-off)
(counters-off)
(dump-counters)
;(exit)


eval: (trace-on)
eval: (begin (display (test 10 list)) (newline))
sequence: ((display (test 10 list)) (newline))
eval: (display (test 10 list))
evaluate-proc: ((test 10 list))
list: ((test 10 list))
eval: (test 10 list)
closure: (10 list)
list: (10 list)
closure: (10 list)
sequence: ((/ (* 1000 (caadr (time (do-test n fun)))) n))
eval: (/ (* 1000 (caadr (time (do-test n fun)))) n)
evaluate-proc: ((* 1000 (caadr (time (do-test n fun)))) n)
list: ((* 1000 (caadr (time (do-test n fun)))) n)
eval: (* 1000 (caadr (time (do-test n fun))))
evaluate-proc: (1000 (caadr (time (do-test n fun))))
list: (1000 (caadr (time (do-test n fun))))
eval: (caadr (time (do-test n fun)))
evaluate-proc: ((time (do-test n fun)))
list: ((time (do-test n fun)))
eval: (time (do-test n fun))
time: ((do-test n fun))
eval: (do-test n fun)
closure: (n fun)
list: (n fun)
closure: (n fun)
sequence: ((do ((i 0 (+ i 1))) ((= i n)) (fun i i i i i i)))
eval: (do ((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
list: (0)
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
sequence: ((= i n))
eval: (= i n)
evaluate-proc: (i n)
list: (i n)
evaluate-proc: (i n)
eval: (= i n)
sequence: ((= i n))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
list: ((fun i i i i i i))
eval: (fun i i i i i i)
evaluate-proc: (i i i i i i)
list: (i i i i i i)
evaluate-proc: (i i i i i i)
eval: (fun i i i i i i)
list: ((fun i i i i i i))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
list: ((+ i 1))
eval: (+ i 1)
evaluate-proc: (i 1)
list: (i 1)
evaluate-proc: (i 1)
eval: (+ i 1)
list: ((+ i 1))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
sequence: ((= i n))
eval: (= i n)
evaluate-proc: (i n)
list: (i n)
evaluate-proc: (i n)
eval: (= i n)
sequence: ((= i n))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
list: ((fun i i i i i i))
eval: (fun i i i i i i)
evaluate-proc: (i i i i i i)
list: (i i i i i i)
evaluate-proc: (i i i i i i)
eval: (fun i i i i i i)
list: ((fun i i i i i i))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
list: ((+ i 1))
eval: (+ i 1)
evaluate-proc: (i 1)
list: (i 1)
evaluate-proc: (i 1)
eval: (+ i 1)
list: ((+ i 1))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
sequence: ((= i n))
eval: (= i n)
evaluate-proc: (i n)
list: (i n)
evaluate-proc: (i n)
eval: (= i n)
sequence: ((= i n))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
list: ((fun i i i i i i))
eval: (fun i i i i i i)
evaluate-proc: (i i i i i i)
list: (i i i i i i)
evaluate-proc: (i i i i i i)
eval: (fun i i i i i i)
list: ((fun i i i i i i))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
list: ((+ i 1))
eval: (+ i 1)
evaluate-proc: (i 1)
list: (i 1)
evaluate-proc: (i 1)
eval: (+ i 1)
list: ((+ i 1))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
sequence: ((= i n))
eval: (= i n)
evaluate-proc: (i n)
list: (i n)
evaluate-proc: (i n)
eval: (= i n)
sequence: ((= i n))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
list: ((fun i i i i i i))
eval: (fun i i i i i i)
evaluate-proc: (i i i i i i)
list: (i i i i i i)
evaluate-proc: (i i i i i i)
eval: (fun i i i i i i)
list: ((fun i i i i i i))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
list: ((+ i 1))
eval: (+ i 1)
evaluate-proc: (i 1)
list: (i 1)
evaluate-proc: (i 1)
eval: (+ i 1)
list: ((+ i 1))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
sequence: ((= i n))
eval: (= i n)
evaluate-proc: (i n)
list: (i n)
evaluate-proc: (i n)
eval: (= i n)
sequence: ((= i n))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
list: ((fun i i i i i i))
eval: (fun i i i i i i)
evaluate-proc: (i i i i i i)
list: (i i i i i i)
evaluate-proc: (i i i i i i)
eval: (fun i i i i i i)
list: ((fun i i i i i i))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
list: ((+ i 1))
eval: (+ i 1)
evaluate-proc: (i 1)
list: (i 1)
evaluate-proc: (i 1)
eval: (+ i 1)
list: ((+ i 1))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
sequence: ((= i n))
eval: (= i n)
evaluate-proc: (i n)
list: (i n)
evaluate-proc: (i n)
eval: (= i n)
sequence: ((= i n))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
list: ((fun i i i i i i))
eval: (fun i i i i i i)
evaluate-proc: (i i i i i i)
list: (i i i i i i)
evaluate-proc: (i i i i i i)
eval: (fun i i i i i i)
list: ((fun i i i i i i))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
list: ((+ i 1))
eval: (+ i 1)
evaluate-proc: (i 1)
list: (i 1)
evaluate-proc: (i 1)
eval: (+ i 1)
list: ((+ i 1))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
sequence: ((= i n))
eval: (= i n)
evaluate-proc: (i n)
list: (i n)
evaluate-proc: (i n)
eval: (= i n)
sequence: ((= i n))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
list: ((fun i i i i i i))
eval: (fun i i i i i i)
evaluate-proc: (i i i i i i)
list: (i i i i i i)
evaluate-proc: (i i i i i i)
eval: (fun i i i i i i)
list: ((fun i i i i i i))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
list: ((+ i 1))
eval: (+ i 1)
evaluate-proc: (i 1)
list: (i 1)
evaluate-proc: (i 1)
eval: (+ i 1)
list: ((+ i 1))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
sequence: ((= i n))
eval: (= i n)
evaluate-proc: (i n)
list: (i n)
evaluate-proc: (i n)
eval: (= i n)
sequence: ((= i n))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
list: ((fun i i i i i i))
eval: (fun i i i i i i)
evaluate-proc: (i i i i i i)
list: (i i i i i i)
evaluate-proc: (i i i i i i)
eval: (fun i i i i i i)
list: ((fun i i i i i i))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
list: ((+ i 1))
eval: (+ i 1)
evaluate-proc: (i 1)
list: (i 1)
evaluate-proc: (i 1)
eval: (+ i 1)
list: ((+ i 1))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
sequence: ((= i n))
eval: (= i n)
evaluate-proc: (i n)
list: (i n)
evaluate-proc: (i n)
eval: (= i n)
sequence: ((= i n))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
list: ((fun i i i i i i))
eval: (fun i i i i i i)
evaluate-proc: (i i i i i i)
list: (i i i i i i)
evaluate-proc: (i i i i i i)
eval: (fun i i i i i i)
list: ((fun i i i i i i))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
list: ((+ i 1))
eval: (+ i 1)
evaluate-proc: (i 1)
list: (i 1)
evaluate-proc: (i 1)
eval: (+ i 1)
list: ((+ i 1))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
sequence: ((= i n))
eval: (= i n)
evaluate-proc: (i n)
list: (i n)
evaluate-proc: (i n)
eval: (= i n)
sequence: ((= i n))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
list: ((fun i i i i i i))
eval: (fun i i i i i i)
evaluate-proc: (i i i i i i)
list: (i i i i i i)
evaluate-proc: (i i i i i i)
eval: (fun i i i i i i)
list: ((fun i i i i i i))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
list: ((+ i 1))
eval: (+ i 1)
evaluate-proc: (i 1)
list: (i 1)
evaluate-proc: (i 1)
eval: (+ i 1)
list: ((+ i 1))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
sequence: ((= i n))
eval: (= i n)
evaluate-proc: (i n)
list: (i n)
evaluate-proc: (i n)
eval: (= i n)
sequence: ((= i n))
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
sequence:
do: (((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
eval: (do ((i 0 (+ i 1))) ((= i n)) (fun i i i i i i))
sequence: ((do ((i 0 (+ i 1))) ((= i n)) (fun i i i i i i)))
closure: (n fun)
eval: (do-test n fun)
time: ((do-test n fun))
eval: (time (do-test n fun))
list: ((time (do-test n fun)))
evaluate-proc: ((time (do-test n fun)))
eval: (caadr (time (do-test n fun)))
list: (1000 (caadr (time (do-test n fun))))
evaluate-proc: (1000 (caadr (time (do-test n fun))))
eval: (* 1000 (caadr (time (do-test n fun))))
list: ((* 1000 (caadr (time (do-test n fun)))) n)
evaluate-proc: ((* 1000 (caadr (time (do-test n fun)))) n)
eval: (/ (* 1000 (caadr (time (do-test n fun)))) n)
sequence: ((/ (* 1000 (caadr (time (do-test n fun)))) n))
closure: (10 list)
eval: (test 10 list)
list: ((test 10 list))
evaluate-proc: ((test 10 list))
25800eval: (display (test 10 list))
sequence: ((display (test 10 list)) (newline))
eval: (newline)
evaluate-proc:

eval: (newline)
sequence: ((display (test 10 list)) (newline))
eval: (begin (display (test 10 list)) (newline))
eval: (trace-off)
evaluate-proc:
primitive 39
step 512
evaluate 160
eval 44
evaluate-proc 39
list 58
sequence 15
closure 2
time 1
do 1
